Coverage Report by file with details

=================================================================================
=== File: ALSU.v
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           48        48         0     100.0

================================Statement Details================================

Statement Coverage for file ALSU.v --

    1                                                module ALSU(A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out);
    2                                                parameter INPUT_PRIORITY = "A";
    3                                                parameter FULL_ADDER = "ON";
    4                                                input clk, rst, cin, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    5                                                input [2:0] opcode;
    6                                                input signed [2:0] A, B;
    7                                                output reg [15:0] leds;
    8                                                output  reg signed [5:0] out;
    9                                                
    10                                               reg red_op_A_reg, red_op_B_reg, bypass_A_reg, bypass_B_reg, direction_reg, serial_in_reg;
    11                                               reg signed [1:0] cin_reg;
    12                                               reg [2:0] opcode_reg;
    13                                               reg signed [2:0] A_reg, B_reg;
    14                                               
    15                                               wire invalid_red_op, invalid_opcode, invalid;
    16                                               
    17                                               //Invalid handling
    18              1                     133844     assign invalid_red_op = (red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]);
    19              1                     133155     assign invalid_opcode = opcode_reg[1] & opcode_reg[2];
    20              1                       8669     assign invalid = invalid_red_op | invalid_opcode;
    21                                               
    22                                               //Registering input signals
    23              1                     144165     always @(posedge clk or posedge rst) begin
    24                                                 if(rst) begin
    25              1                      10118          cin_reg <= 0;
    26              1                      10118          red_op_B_reg <= 0;
    27              1                      10118          red_op_A_reg <= 0;
    28              1                      10118          bypass_B_reg <= 0;
    29              1                      10118          bypass_A_reg <= 0;
    30              1                      10118          direction_reg <= 0;
    31              1                      10118          serial_in_reg <= 0;
    32              1                      10118          opcode_reg <= 0;
    33              1                      10118          A_reg <= 0;
    34              1                      10118          B_reg <= 0;
    35                                                 end else begin
    36              1                     134047          cin_reg <= cin;
    37              1                     134047          red_op_B_reg <= red_op_B;
    38              1                     134047          red_op_A_reg <= red_op_A;
    39              1                     134047          bypass_B_reg <= bypass_B;
    40              1                     134047          bypass_A_reg <= bypass_A;
    41              1                     134047          direction_reg <= direction;
    42              1                     134047          serial_in_reg <= serial_in;
    43              1                     134047          opcode_reg <= opcode;
    44              1                     134047          A_reg <= A;
    45              1                     134047          B_reg <= B;
    46                                                 end
    47                                               end
    48                                               
    49                                               //leds output blinking 
    50              1                     144166     always @(posedge clk or posedge rst) begin
    51                                                 if(rst) begin
    52              1                      10119          leds <= 0;
    53                                                 end else begin
    54                                                     if (invalid)
    55              1                       3770             leds <= ~leds;
    56                                                     else
    57              1                     130277             leds <= 0;
    58                                                 end
    59                                               end
    60                                               
    61                                               //ALSU output processing
    62              1                     141867     always @(posedge clk or posedge rst) begin
    63                                                 if(rst) begin
    64              1                       8322         out <= 0;
    65                                                 end
    66                                                 else begin
    67                                                   
    68                                                    if (bypass_A_reg && bypass_B_reg)
    69              1                       2481           out <= (INPUT_PRIORITY == "A")? A_reg: B_reg;
    70                                                   else if (bypass_A_reg)
    71              1                       2523           out <= A_reg;
    72                                                   else if (bypass_B_reg)
    73              1                       2393           out <= B_reg;
    74                                                   else if (invalid) 
    75              1                        955             out <= 0;
    76                                                   else begin
    77                                                       case (opcode_reg)//fourth fix the parameter should be the opcode_reg
    78                                                         3'h0: begin 
    79                                                           if (red_op_A_reg && red_op_B_reg)
    80              1                          1                   out = (INPUT_PRIORITY == "A")? |A_reg: |B_reg; // second fix when op is 0 we do or operation not and
    81                                                           else if (red_op_A_reg) 
    82              1                          1                   out <= |A_reg;
    83                                                           else if (red_op_B_reg)
    84              1                          1                   out <= |B_reg;
    85                                                           else 
    86              1                      24060                   out <= A_reg | B_reg;
    87                                                         end
    88                                                         3'h1: begin
    89                                                           if (red_op_A_reg && red_op_B_reg)
    90              1                        473                   out <= (INPUT_PRIORITY == "A")? ^A_reg: ^B_reg;// third fix when op is 0 we do xor operation not or
    91                                                           else if (red_op_A_reg) 
    92              1                         25                   out <= ^A_reg;
    93                                                           else if (red_op_B_reg)
    94              1                         19                   out <= ^B_reg;
    95                                                           else 
    96              1                      19910                   out <= A_reg ^ B_reg;
    97                                                         end
    98              1                      20069               3'h2: out <= (FULL_ADDER=="ON")?A_reg + B_reg+cin_reg:A_reg+B_reg; // first fix the full adder parameter should be taken in consideration
    99              1                      20404               3'h3: out <= A_reg * B_reg;
    100                                                        3'h4: begin
    101                                                          if (direction_reg)
    102             1                        104                   out <= {out[4:0], serial_in_reg};
    103                                                          else
    104             1                      20032                   out <= {serial_in_reg, out[5:1]};
    105                                                        end
    106                                                        3'h5: begin
    107                                                          if (direction_reg)
    108             1                        111                   out <= {out[4:0], out[5]};
    109                                                          else
    110             1                      19983                   out <= {out[0], out[5:1]};
    111                                                        end
    112             1                          E               default : out<=0; // useless but I made it so I can exclude it in branch coverage 
    113                                                      endcase
    114                                                  end 
    115                                                end
    116                                              end
    117                                              
    118                                              endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        31        31         0     100.0

================================Branch Details================================

Branch Coverage for file ALSU.v --

------------------------------------IF Branch------------------------------------
    24                                    144165     Count coming in to IF
    24              1                      10118       if(rst) begin
    35              1                     134047       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    51                                    144166     Count coming in to IF
    51              1                      10119       if(rst) begin
    53              1                     134047       end else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    54                                    134047     Count coming in to IF
    54              1                       3770           if (invalid)
    56              1                     130277           else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    63                                    141867     Count coming in to IF
    63              1                       8322       if(rst) begin
    66              1                     133545       else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    68                                    133545     Count coming in to IF
    68              1                       2481          if (bypass_A_reg && bypass_B_reg)
    70              1                       2523         else if (bypass_A_reg)
    72              1                       2393         else if (bypass_B_reg)
    74              1                        955         else if (invalid) 
    76              1                     125193         else begin
Branch totals: 5 hits of 5 branches = 100.0%

------------------------------------CASE Branch------------------------------------
    77                                    125193     Count coming in to CASE
    78              1                      24063               3'h0: begin 
    88              1                      20427               3'h1: begin
    98              1                      20069               3'h2: out <= (FULL_ADDER=="ON")?A_reg + B_reg+cin_reg:A_reg+B_reg; // first fix the full adder parameter should be taken in consideration
    99              1                      20404               3'h3: out <= A_reg * B_reg;
    100             1                      20136               3'h4: begin
    106             1                      20094               3'h5: begin
    112             1                          E               default : out<=0; // useless but I made it so I can exclude it in branch coverage 
Branch totals: 6 hits of 6 branches = 100.0%

------------------------------------IF Branch------------------------------------
    79                                     24063     Count coming in to IF
    79              1                          1                 if (red_op_A_reg && red_op_B_reg)
    81              1                          1                 else if (red_op_A_reg) 
    83              1                          1                 else if (red_op_B_reg)
    85              1                      24060                 else 
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    89                                     20427     Count coming in to IF
    89              1                        473                 if (red_op_A_reg && red_op_B_reg)
    91              1                         25                 else if (red_op_A_reg) 
    93              1                         19                 else if (red_op_B_reg)
    95              1                      19910                 else 
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    101                                    20136     Count coming in to IF
    101             1                        104                 if (direction_reg)
    103             1                      20032                 else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    107                                    20094     Count coming in to IF
    107             1                        111                 if (direction_reg)
    109             1                      19983                 else
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              6         6         0     100.0

================================Condition Details================================

Condition Coverage for file ALSU.v --

----------------Focused Condition View-------------------
Line       68 Item    1  (bypass_A_reg && bypass_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  bypass_A_reg         Y
  bypass_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  bypass_A_reg_0        -                             
  Row   2:          1  bypass_A_reg_1        bypass_B_reg                  
  Row   3:          1  bypass_B_reg_0        bypass_A_reg                  
  Row   4:          1  bypass_B_reg_1        bypass_A_reg                  

----------------Focused Condition View-------------------
Line       79 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  

----------------Focused Condition View-------------------
Line       89 Item    1  (red_op_A_reg && red_op_B_reg)
Condition totals: 2 of 2 input terms covered = 100.0%

    Input Term   Covered  Reason for no coverage   Hint
   -----------  --------  -----------------------  --------------
  red_op_A_reg         Y
  red_op_B_reg         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        -                             
  Row   2:          1  red_op_A_reg_1        red_op_B_reg                  
  Row   3:          1  red_op_B_reg_0        red_op_A_reg                  
  Row   4:          1  red_op_B_reg_1        red_op_A_reg                  


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             8         8         0     100.0

================================Expression Details================================

Expression Coverage for file ALSU.v --

----------------Focused Expression View-----------------
Line       18 Item    1  ((red_op_A_reg | red_op_B_reg) & (opcode_reg[1] | opcode_reg[2]))
Expression totals: 4 of 4 input terms covered = 100.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
   red_op_A_reg         Y
   red_op_B_reg         Y
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  red_op_A_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   2:          1  red_op_A_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_B_reg)
  Row   3:          1  red_op_B_reg_0        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   4:          1  red_op_B_reg_1        ((opcode_reg[1] | opcode_reg[2]) && ~red_op_A_reg)
  Row   5:          1  opcode_reg[1]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   6:          1  opcode_reg[1]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[2])
  Row   7:          1  opcode_reg[2]_0       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])
  Row   8:          1  opcode_reg[2]_1       ((red_op_A_reg | red_op_B_reg) && ~opcode_reg[1])

----------------Focused Expression View-----------------
Line       19 Item    1  (opcode_reg[1] & opcode_reg[2])
Expression totals: 2 of 2 input terms covered = 100.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  opcode_reg[1]         Y
  opcode_reg[2]         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  opcode_reg[1]_0       opcode_reg[2]                 
  Row   2:          1  opcode_reg[1]_1       opcode_reg[2]                 
  Row   3:          1  opcode_reg[2]_0       opcode_reg[1]                 
  Row   4:          1  opcode_reg[2]_1       opcode_reg[1]                 

----------------Focused Expression View-----------------
Line       20 Item    1  (invalid_red_op | invalid_opcode)
Expression totals: 2 of 2 input terms covered = 100.0%

      Input Term   Covered  Reason for no coverage   Hint
     -----------  --------  -----------------------  --------------
  invalid_red_op         Y
  invalid_opcode         Y

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:          1  invalid_red_op_0      ~invalid_opcode               
  Row   2:          1  invalid_red_op_1      ~invalid_opcode               
  Row   3:          1  invalid_opcode_0      ~invalid_red_op               
  Row   4:          1  invalid_opcode_1      ~invalid_red_op               


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                    118       118         0     100.0

================================Toggle Details================================

Toggle Coverage for File ALSU.v --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          4                              serial_in           1           1      100.00 
          4                                    rst           1           1      100.00 
          4                               red_op_B           1           1      100.00 
          4                               red_op_A           1           1      100.00 
          4                              direction           1           1      100.00 
          4                                    clk           1           1      100.00 
          4                                    cin           1           1      100.00 
          4                               bypass_B           1           1      100.00 
          4                               bypass_A           1           1      100.00 
          5                              opcode[2]           1           1      100.00 
          5                              opcode[1]           1           1      100.00 
          5                              opcode[0]           1           1      100.00 
          6                                   B[2]           1           1      100.00 
          6                                   B[1]           1           1      100.00 
          6                                   B[0]           1           1      100.00 
          6                                   A[2]           1           1      100.00 
          6                                   A[1]           1           1      100.00 
          6                                   A[0]           1           1      100.00 
          7                                leds[9]           1           1      100.00 
          7                                leds[8]           1           1      100.00 
          7                                leds[7]           1           1      100.00 
          7                                leds[6]           1           1      100.00 
          7                                leds[5]           1           1      100.00 
          7                                leds[4]           1           1      100.00 
          7                                leds[3]           1           1      100.00 
          7                                leds[2]           1           1      100.00 
          7                                leds[1]           1           1      100.00 
          7                               leds[15]           1           1      100.00 
          7                               leds[14]           1           1      100.00 
          7                               leds[13]           1           1      100.00 
          7                               leds[12]           1           1      100.00 
          7                               leds[11]           1           1      100.00 
          7                               leds[10]           1           1      100.00 
          7                                leds[0]           1           1      100.00 
          8                                 out[5]           1           1      100.00 
          8                                 out[4]           1           1      100.00 
          8                                 out[3]           1           1      100.00 
          8                                 out[2]           1           1      100.00 
          8                                 out[1]           1           1      100.00 
          8                                 out[0]           1           1      100.00 
         10                          serial_in_reg           1           1      100.00 
         10                           red_op_B_reg           1           1      100.00 
         10                           red_op_A_reg           1           1      100.00 
         10                          direction_reg           1           1      100.00 
         10                           bypass_B_reg           1           1      100.00 
         10                           bypass_A_reg           1           1      100.00 
         11                             cin_reg[0]           1           1      100.00 
         12                          opcode_reg[2]           1           1      100.00 
         12                          opcode_reg[1]           1           1      100.00 
         12                          opcode_reg[0]           1           1      100.00 
         13                               B_reg[2]           1           1      100.00 
         13                               B_reg[1]           1           1      100.00 
         13                               B_reg[0]           1           1      100.00 
         13                               A_reg[2]           1           1      100.00 
         13                               A_reg[1]           1           1      100.00 
         13                               A_reg[0]           1           1      100.00 
         15                         invalid_red_op           1           1      100.00 
         15                         invalid_opcode           1           1      100.00 
         15                                invalid           1           1      100.00 

Total Node Count     =         59 
Toggled Node Count   =         59 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (118 of 118 bins)

=================================================================================
=== File: alsu_agt.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           15        12         3      80.0

================================Statement Details================================

Statement Coverage for file alsu_agt.sv --

    1                                                package alsu_agtt;
    2                                                    import uvm_pkg::*;
    3                                                    import drive::*;
    4                                                    import seqr_pac::*;
    5                                                    import alsuu_monitor::*;
    6                                                    import cfg::*;
    7                                                    import sequence_item::*;
    8                                                    `include "uvm_macros.svh"
    9                                                    class alsu_agt extends uvm_agent;
    10              1                    ***0***             `uvm_component_utils(alsu_agt)
    10              2                    ***0***     
    10              3                          2     
    11                                                       alsu_driver driver;
    12                                                       alsu_monitor monitor;
    13                                                       alsu_confg cfg;
    14                                                       sqr_class sqr;
    15                                                       uvm_analysis_port #(seq_item) agt_ap;
    16                                                       function new(string name="alsu_agt", uvm_component parent = null);
    17              1                          1                 super.new(name,parent);
    18                                                       endfunction //new()
    19                                                       function void build_phase(uvm_phase phase);
    20              1                          1                 super.build_phase(phase);
    21              1                          1                 driver = alsu_driver::type_id::create("driver",this);
    22              1                          1                 sqr = sqr_class::type_id::create("sqr",this);
    23              1                          1                 monitor = alsu_monitor::type_id::create("mon",this);
    24                                                       if(!uvm_config_db #(alsu_confg) :: get(this,"","CFG",cfg))
    25              1                    ***0***             `uvm_fatal("build_phase","no");
    26              1                          1             agt_ap = new("agt_ap",this);
    27                                                       endfunction
    28                                                       function void connect_phase (uvm_phase phase);
    29              1                          1             super.connect_phase(phase);
    30              1                          1             driver.alsu_test_vif=cfg.alsu_test_vif;
    31              1                          1             monitor.alsu_test_vif=cfg.alsu_test_vif;
    32              1                          1             driver.seq_item_port.connect(sqr.seq_item_export);
    33              1                          1             monitor.mon_ap.connect(agt_ap);
    34                                                   endfunction 
    35                                                   endclass //className extends superClass
    36                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3      25.0

================================Branch Details================================

Branch Coverage for file alsu_agt.sv --

------------------------------------IF Branch------------------------------------
    24                                         1     Count coming in to IF
    24              1                    ***0***             if(!uvm_config_db #(alsu_confg) :: get(this,"","CFG",cfg))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    25                                   ***0***     Count coming in to IF
    25              1                    ***0***             `uvm_fatal("build_phase","no");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_agt.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_confg.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         1        10       9.0

================================Statement Details================================

Statement Coverage for file alsu_confg.sv --

    1                                                package cfg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                class alsu_confg extends uvm_object;
    5               1                    ***0***         `uvm_object_utils(alsu_confg)
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                    ***0***     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                    ***0***     
    5              10                    ***0***     
    6                                                        virtual alsu_inter alsu_test_vif;
    7                                                        function new(string name = "alsu_confg" );
    8               1                          1             super.new(name);
    9                                                        endfunction
    10                                               endclass //className extends superClass
    11                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         0        10       0.0

================================Branch Details================================

Branch Coverage for file alsu_confg.sv --

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***         `uvm_object_utils(alsu_confg)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               2                    ***0***         `uvm_object_utils(alsu_confg)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***         `uvm_object_utils(alsu_confg)
    5               4                    ***0***         `uvm_object_utils(alsu_confg)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               5                    ***0***         `uvm_object_utils(alsu_confg)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***         `uvm_object_utils(alsu_confg)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_confg.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_coverage.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           14        12         2      85.7

================================Statement Details================================

Statement Coverage for file alsu_coverage.sv --

    1                                                package coverage_pkg;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                import sequence_item::*;
    5                                                class alsu_cover extends uvm_component;
    6               1                    ***0***     `uvm_component_utils(alsu_cover)
    6               2                    ***0***     
    6               3                          2     
    7                                                uvm_analysis_export #(seq_item) cov_export;
    8                                                uvm_tlm_analysis_fifo #(seq_item) cov_fifo;
    9                                                seq_item item;
    10                                               parameter maxpos=3, maxneg=-4, zero=0 ;
    11                                               covergroup g1 ;
    12                                                       direction_cp:coverpoint item.direction{
    13                                                           bins dir1={1};
    14                                                           bins dir0={0};
    15                                                       }
    16                                                       serial_in_cp:coverpoint item.serial_in{
    17                                                           bins in1={1};
    18                                                           bins in0={0};
    19                                                       }
    20                                                       CIN_cp: coverpoint item.cin {
    21                                                           bins cin1={1};
    22                                                           bins cin0={0};
    23                                                       }
    24                                                       A_cp: coverpoint item.A{
    25                                                           bins A_data_0 ={0};
    26                                                           bins A_data_max ={maxpos};
    27                                                           bins A_data_neg ={maxneg};
    28                                                           bins A_data_walkingones[]={1,2,-4} iff(item.red_op_A);
    29                                                           bins A_data_default=default;
    30                                                       }
    31                                                       B_cp: coverpoint item.B{
    32                                                           bins B_data_0 ={0};
    33                                                           bins B_data_max ={maxpos};
    34                                                           bins B_data_neg ={maxneg};
    35                                                           bins B_data_walkingones[]={1,2,-4} iff(!item.red_op_A&&item.red_op_B);
    36                                                           bins B_data_default=default;
    37                                                       }
    38                                                       ALU_cpp : coverpoint item.opcode{
    39                                                           bins binsinvalid[]={item.INVALID6,item.INVALID7} ;
    40                                                           bins bins_shift[] ={item.SHIFT,item.ROTATE};
    41                                                           bins bins_arith[] ={item.ADD,item.MULT};
    42                                                           bins bins_bitwise[] ={item.OR,item.XOR}; 
    43                                                       }
    44                                                       
    45                                                       ALU_cp: coverpoint item.op2{
    46                                                           bins bins_shift[] ={item.SHIFT,item.ROTATE};
    47                                                           bins bins_arith[] ={item.ADD,item.MULT};
    48                                                           bins bins_bitwise[] ={item.OR,item.XOR}; 
    49                                                           bins bins_trans[]=(item.OR=>item.XOR, item.ADD, item.MULT, item.SHIFT, item.ROTATE);
    50                                                       }
    51                                                       cross A_cp,B_cp,ALU_cp,CIN_cp,serial_in_cp,direction_cp,ALU_cpp {
    52                                                           option.cross_auto_bin_max=0;
    53                                                           bins add_mult_max_a = binsof(ALU_cp.bins_arith)&&binsof(A_cp.A_data_max);
    54                                                           bins add_mult_max_b = binsof(ALU_cp.bins_arith)&&binsof(B_cp.B_data_max);
    55                                                           bins add_mult_neg_a = binsof(ALU_cp.bins_arith)&&binsof(A_cp.A_data_neg);
    56                                                           bins add_mult_neg_b = binsof(ALU_cp.bins_arith)&&binsof(B_cp.B_data_neg);
    57                                                           bins add_mult_zero_a = binsof(ALU_cp.bins_arith)&&binsof(A_cp.A_data_0);
    58                                                           bins add_mult_zero_b = binsof(ALU_cp.bins_arith)&&binsof(B_cp.B_data_0);
    59                                                           bins add_cin_1 = ((binsof (ALU_cp) intersect {item.ADD})||(binsof (ALU_cpp) intersect {item.ADD})) && (binsof(CIN_cp.cin1));
    60                                                           bins add_cin_0 = binsof (ALU_cp) intersect {item.ADD} && (binsof(CIN_cp.cin0));
    61                                                           bins shift_shiftin_0 = binsof (ALU_cp) intersect {item.SHIFT} && (binsof(serial_in_cp.in0));
    62                                                           bins shift_shiftin_1 = (binsof (ALU_cp) intersect {item.SHIFT}||binsof (ALU_cpp) intersect {item.SHIFT}) && (binsof(serial_in_cp.in1));
    63                                                           bins shift_rotate_0 = binsof (ALU_cp.bins_shift) && (binsof(direction_cp.dir0));
    64                                                           bins shift_rotate_1 =( binsof (ALU_cp.bins_shift) || binsof (ALU_cpp.bins_shift)) && (binsof(direction_cp.dir1));
    65                                                           bins red_op_A_OR_XOR_1 = binsof(ALU_cp.bins_bitwise) && binsof(A_cp) intersect {1} &&binsof(B_cp.B_data_0) iff(item.red_op_A);
    66                                                           bins red_op_A_OR_XOR_2 = binsof(ALU_cp.bins_bitwise) && binsof(A_cp) intersect {2} &&binsof(B_cp.B_data_0) iff(item.red_op_A);
    67                                                           bins red_op_A_OR_XOR_4 = binsof(ALU_cp.bins_bitwise) && binsof(A_cp) intersect {-4} &&binsof(B_cp.B_data_0) iff(item.red_op_A);
    68                                                           bins red_op_B_OR_XOR_1 = binsof(ALU_cp.bins_bitwise) && binsof(B_cp) intersect {1} &&binsof(A_cp.A_data_0) iff(!item.red_op_A&&item.red_op_B);
    69                                                           bins red_op_B_OR_XOR_2 = binsof(ALU_cp.bins_bitwise) && binsof(B_cp) intersect {2} &&binsof(A_cp.A_data_0) iff(!item.red_op_A&&item.red_op_B);
    70                                                           bins red_op_B_OR_XOR_4 = binsof(ALU_cp.bins_bitwise) && binsof(B_cp) intersect {-4} &&binsof(A_cp.A_data_0) iff(!item.red_op_A&&item.red_op_B);
    71                                                           bins invalid =  ! binsof (ALU_cpp.bins_bitwise)  iff(item.red_op_A||item.red_op_B);
    72                                                       }
    73                                                       endgroup
    74                                               
    75                                                  function new(string name = "alsu_cover" , uvm_component parent = null);
    76              1                          1             super.new(name,parent);
    77              1                          1             g1=new();
    78                                                   endfunction
    79                                                   
    80                                                     function void build_phase (uvm_phase phase);
    81              1                          1             super.build_phase(phase);
    82              1                          1             cov_export=new("sb_export",this);
    83              1                          1             cov_fifo=new("sb_fifo",this);
    84                                                   endfunction 
    85                                               
    86                                                   function void connect_phase (uvm_phase phase);
    87              1                          1             super.connect_phase(phase);
    88              1                          1             cov_export.connect(cov_fifo.analysis_export);
    89                                                   endfunction 
    90                                                    task  run_phase(uvm_phase phase);
    91              1                          1             super.run_phase(phase);
    92              1                          1             forever begin
    93              1                     140006             cov_fifo.get(item);
    94              1                     140005             g1.sample();
    95                                                       end
    96                                                   endtask
    97                                               endclass 
    98                                                   
    99                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_coverage.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_driver.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           77        59        18      76.6

================================Statement Details================================

Statement Coverage for file alsu_driver.sv --

    1                                                package drive;
    2                                                    import uvm_pkg::*;
    3                                                    import cfg::*;
    4                                                    import sequence_item::*;
    5                                                    `include "uvm_macros.svh"
    6                                                    class alsu_driver extends uvm_driver#(seq_item);
    7               1                    ***0***         `uvm_component_utils(alsu_driver)
    7               2                    ***0***     
    7               3                          2     
    8                                                    parameter testcases = 20000;
    9                                                    seq_item item;
    10                                                   alsu_confg conf;
    11                                                   virtual alsu_inter alsu_test_vif;
    12                                                       function new(string name="alsu_driver",uvm_component parent = null);
    13              1                          1                 super.new(name,parent);
    14                                                       endfunction //new()
    15                                                       function void build_phase (uvm_phase phase);
    16              1                          1             super.build_phase(phase);
    17                                                       if(!uvm_config_db#(alsu_confg)::get(null,"","CFG",conf))
    18              1                    ***0***             `uvm_fatal("build_phase","a333333333");
    19                                                   endfunction 
    20                                                       function void connect_phase(uvm_phase phase);
    21              1                          1                 super.connect_phase(phase);
    22              1                          1                 alsu_test_vif=conf.alsu_test_vif;
    23                                                       endfunction
    24                                                       task run_phase (uvm_phase phase);
    25              1                          1                 super.run_phase(phase);
    26                                                               // for reset
    27              1                          1                     item = seq_item::type_id::create("item");
    28              1                          1                     seq_item_port.get_next_item(item);
    29              1                          1                     alsu_test_vif.rst=item.rst;
    30              1                          1                     alsu_test_vif.cin=item.cin;
    31              1                          1                     alsu_test_vif.red_op_A=item.red_op_A;
    32              1                          1                     alsu_test_vif.red_op_B=item.red_op_B;
    33              1                          1                     alsu_test_vif.bypass_A=item.bypass_A;
    34              1                          1                     alsu_test_vif.bypass_B=item.bypass_B;
    35              1                          1                     alsu_test_vif.direction=item.direction;
    36              1                          1                     alsu_test_vif.serial_in=item.serial_in;
    37              1                          1                     alsu_test_vif.opcode=item.opcode;
    38              1                          1                     alsu_test_vif.A=item.A;
    39              1                          1                     alsu_test_vif.B=item.B;
    40              1                          1                     @(negedge alsu_test_vif.clk);
    41              1                          1                     seq_item_port.item_done();
    42                                                               //for main with con1
    43              1                      20003                 repeat(testcases+3) begin
    44              1                      20003                     item = seq_item::type_id::create("item");
    45              1                      20003                     seq_item_port.get_next_item(item);
    46              1                      20003                     alsu_test_vif.rst=item.rst;
    47              1                      20003                     alsu_test_vif.cin=item.cin;
    48              1                      20003                     alsu_test_vif.red_op_A=item.red_op_A;
    49              1                      20003                     alsu_test_vif.red_op_B=item.red_op_B;
    50              1                      20003                     alsu_test_vif.bypass_A=item.bypass_A;
    51              1                      20003                     alsu_test_vif.bypass_B=item.bypass_B;
    52              1                      20003                     alsu_test_vif.direction=item.direction;
    53              1                      20003                     alsu_test_vif.serial_in=item.serial_in;
    54              1                      20003                     alsu_test_vif.opcode=item.opcode;
    55              1                      20003                     alsu_test_vif.A=item.A;
    56              1                      20003                     alsu_test_vif.B=item.B;
    57              1                      20003                     @(negedge alsu_test_vif.clk);
    58              1                      20003                     seq_item_port.item_done();
    59                                                           end
    60                                                           //for main with con2
    61              1                      17143                 repeat(testcases*6) begin
    62              1                      17144                     item = seq_item::type_id::create("item");
    63              1                      17144                     seq_item_port.get_next_item(item);
    64              1                      17143                     alsu_test_vif.rst=0;
    65              1                      17143                     alsu_test_vif.cin=0;
    66              1                      17143                     alsu_test_vif.red_op_A=0;
    67              1                      17143                     alsu_test_vif.red_op_B=0;
    68              1                      17143                     alsu_test_vif.bypass_A=0;
    69              1                      17143                     alsu_test_vif.bypass_B=0;
    70              1                      17143                     alsu_test_vif.direction=0;
    71              1                      17143                     alsu_test_vif.serial_in=0;
    72              1                      17143                     alsu_test_vif.A=item.A;
    73              1                      17143                     alsu_test_vif.B=item.B;
    74              1                      17143                     alsu_test_vif.opcode=item.op2;
    75              1                     102858                     repeat(6) begin
    76              1                     102858                     @(negedge alsu_test_vif.clk);
    77              1                     102858                     seq_item_port.item_done();
    78              1                     102858                     item = seq_item::type_id::create("item");
    79              1                     102858                     seq_item_port.get_next_item(item);
    80              1                     102858                     alsu_test_vif.opcode=item.op2;
    81                                                               end
    82              1                      17143                     @(negedge alsu_test_vif.clk);
    83              1                      17143                     seq_item_port.item_done();
    84                                                           end
    85                                                           // for reset
    86              1                    ***0***                     item = seq_item::type_id::create("item");
    87              1                    ***0***                     seq_item_port.get_next_item(item);
    88              1                    ***0***                     alsu_test_vif.rst=item.rst;
    89              1                    ***0***                     alsu_test_vif.cin=item.cin;
    90              1                    ***0***                     alsu_test_vif.red_op_A=item.red_op_A;
    91              1                    ***0***                     alsu_test_vif.red_op_B=item.red_op_B;
    92              1                    ***0***                     alsu_test_vif.bypass_A=item.bypass_A;
    93              1                    ***0***                     alsu_test_vif.bypass_B=item.bypass_B;
    94              1                    ***0***                     alsu_test_vif.direction=item.direction;
    95              1                    ***0***                     alsu_test_vif.serial_in=item.serial_in;
    96              1                    ***0***                     alsu_test_vif.opcode=item.opcode;
    97              1                    ***0***                     alsu_test_vif.A=item.A;
    98              1                    ***0***                     alsu_test_vif.B=item.B;
    99              1                    ***0***                     @(negedge alsu_test_vif.clk);
    100             1                    ***0***                     seq_item_port.item_done();
    101                                                      endtask //run_phase
    102                                                  endclass //className extends superClass
    103                                              endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         4         1         3      25.0

================================Branch Details================================

Branch Coverage for file alsu_driver.sv --

------------------------------------IF Branch------------------------------------
    17                                         1     Count coming in to IF
    17              1                    ***0***             if(!uvm_config_db#(alsu_confg)::get(null,"","CFG",conf))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    18                                   ***0***     Count coming in to IF
    18              1                    ***0***             `uvm_fatal("build_phase","a333333333");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_driver.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_env.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           11         9         2      81.8

================================Statement Details================================

Statement Coverage for file alsu_env.sv --

    1                                                package env_pac;
    2                                                import uvm_pkg::*;
    3                                                import alsu_agtt::*;
    4                                                import coverage_pkg::*;
    5                                                import scoreborad_pck::*;
    6                                                `include "uvm_macros.svh"
    7                                                
    8                                                class alsu_env extends uvm_env;
    9               1                    ***0***         `uvm_component_utils(alsu_env)
    9               2                    ***0***     
    9               3                          2     
    10                                                   alsu_agt agt;
    11                                                   alsu_scoreborad sb;
    12                                                   alsu_cover cov;
    13                                                   function new(string name = "alsu_env" , uvm_component parent = null);
    14              1                          1             super.new(name,parent);
    15                                                   endfunction
    16                                               
    17                                                   function void build_phase (uvm_phase phase);
    18              1                          1             super.build_phase(phase);
    19              1                          1             agt = alsu_agt::type_id::create("agt",this);
    20              1                          1             sb = alsu_scoreborad::type_id::create("sb",this);
    21              1                          1             cov = alsu_cover::type_id::create("cov",this);
    22                                                   endfunction 
    23                                                   function void connect_phase (uvm_phase phase);
    24              1                          1             super.connect_phase(phase);
    25              1                          1             agt.agt_ap.connect(sb.sb_export);
    26              1                          1             agt.agt_ap.connect(cov.cov_export);
    27                                                   endfunction 
    28                                               endclass 
    29                                                   
    30                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_env.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_interface.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            0         0         0     100.0
Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     80        80         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_interface.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          2                                    clk           1           1      100.00 
          3                              serial_in           1           1      100.00 
          3                                    rst           1           1      100.00 
          3                               red_op_B           1           1      100.00 
          3                               red_op_A           1           1      100.00 
          3                              direction           1           1      100.00 
          3                                    cin           1           1      100.00 
          3                               bypass_B           1           1      100.00 
          3                               bypass_A           1           1      100.00 
          4                              opcode[2]           1           1      100.00 
          4                              opcode[1]           1           1      100.00 
          4                              opcode[0]           1           1      100.00 
          5                                   B[2]           1           1      100.00 
          5                                   B[1]           1           1      100.00 
          5                                   B[0]           1           1      100.00 
          5                                   A[2]           1           1      100.00 
          5                                   A[1]           1           1      100.00 
          5                                   A[0]           1           1      100.00 
          6                                leds[9]           1           1      100.00 
          6                                leds[8]           1           1      100.00 
          6                                leds[7]           1           1      100.00 
          6                                leds[6]           1           1      100.00 
          6                                leds[5]           1           1      100.00 
          6                                leds[4]           1           1      100.00 
          6                                leds[3]           1           1      100.00 
          6                                leds[2]           1           1      100.00 
          6                                leds[1]           1           1      100.00 
          6                               leds[15]           1           1      100.00 
          6                               leds[14]           1           1      100.00 
          6                               leds[13]           1           1      100.00 
          6                               leds[12]           1           1      100.00 
          6                               leds[11]           1           1      100.00 
          6                               leds[10]           1           1      100.00 
          6                                leds[0]           1           1      100.00 
          7                                 out[5]           1           1      100.00 
          7                                 out[4]           1           1      100.00 
          7                                 out[3]           1           1      100.00 
          7                                 out[2]           1           1      100.00 
          7                                 out[1]           1           1      100.00 
          7                                 out[0]           1           1      100.00 

Total Node Count     =         40 
Toggled Node Count   =         40 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (80 of 80 bins)

=================================================================================
=== File: alsu_monitor.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           23        21         2      91.3

================================Statement Details================================

Statement Coverage for file alsu_monitor.sv --

    1                                                package alsuu_monitor;
    2                                                    import uvm_pkg::*;
    3                                                    `include "uvm_macros.svh"
    4                                                    import sequence_item::*;
    5                                                    class alsu_monitor extends uvm_monitor;
    6               1                    ***0***             `uvm_component_utils(alsu_monitor)
    6               2                    ***0***     
    6               3                          2     
    7                                                        seq_item item;
    8                                                        virtual alsu_inter alsu_test_vif;
    9                                                        uvm_analysis_port #(seq_item) mon_ap;
    10                                                       function new(string name = "alsu_monitor",uvm_component parent = null);
    11              1                          1                 super.new(name,parent);
    12                                                       endfunction //new()
    13                                                       function void build_phase (uvm_phase phase);
    14              1                          1                 super.build_phase(phase);
    15              1                          1                 mon_ap=new("mon_ap",this);
    16                                                       endfunction 
    17                                                       task  run_phase(uvm_phase phase);
    18              1                          1             super.run_phase(phase);
    19              1                          1             forever begin
    20              1                     140006                 item = seq_item::type_id::create("item");
    21              1                     140006                 @(negedge alsu_test_vif.clk);
    22              1                     140005                 item.rst=alsu_test_vif.rst; 
    23              1                     140005                 item.cin=alsu_test_vif.cin;
    24              1                     140005                 item.red_op_A=alsu_test_vif.red_op_A;
    25              1                     140005                 item.red_op_B=alsu_test_vif.red_op_B;
    26              1                     140005                 item.bypass_A=alsu_test_vif.bypass_A;
    27              1                     140005                 item.bypass_B=alsu_test_vif.bypass_B;
    28              1                     140005                 item.direction=alsu_test_vif.direction;
    29              1                     140005                 item.serial_in=alsu_test_vif.serial_in;
    30                                                           // item.opcode=alsu_test_vif.opcode;
    31                                                           // item.op2=alsu_test_vif.opcode;
    32              1                     140005                 item.A=alsu_test_vif.A;
    33              1                     140005                 item.B=alsu_test_vif.B;
    34              1                     140005                 item.leds=alsu_test_vif.leds;
    35              1                     140005                 item.out=alsu_test_vif.out;
    36              1                     140005                 mon_ap.write(item);
    37                                                       end
    38                                                   endtask //
    39                                                   endclass //className extends superClass
    40                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_monitor.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_scoreboard.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           58        52         6      89.6

================================Statement Details================================

Statement Coverage for file alsu_scoreboard.sv --

    1                                                package scoreborad_pck;
    2                                                    import uvm_pkg::*;
    3                                                    `include "uvm_macros.svh"
    4                                                    import sequence_item::*;
    5                                                class  alsu_scoreborad extends uvm_scoreboard;
    6               1                    ***0***     `uvm_component_utils(alsu_scoreborad)
    6               2                    ***0***     
    6               3                          2     
    7                                                
    8                                                uvm_analysis_export #(seq_item) sb_export;
    9                                                uvm_tlm_analysis_fifo #(seq_item) sb_fifo;
    10                                               seq_item item;
    11                                               static int correct_count =0;
    12                                               static int wrong_count =0;
    13                                               logic red_op_A_reg,red_op_B_reg,bypass_A_reg,bypass_B_reg,direction_reg,serial_in_reg;
    14                                               logic signed [1:0] cin_reg;
    15                                               logic [2:0]opcode_reg;
    16                                               logic signed [2:0]A_reg , B_reg;
    17                                               logic signed [5:0] out_exp;
    18                                               logic [15:0] leds_exp;
    19                                                   function new(string name = "alsu_scoreborad" , uvm_component parent = null);
    20              1                          1             super.new(name,parent);
    21                                                   endfunction
    22                                                   
    23                                                     function void build_phase (uvm_phase phase);
    24              1                          1             super.build_phase(phase);
    25              1                          1             sb_export=new("sb_export",this);
    26              1                          1             sb_fifo=new("sb_fifo",this);
    27                                                   endfunction 
    28                                               
    29                                                   function void connect_phase (uvm_phase phase);
    30              1                          1             super.connect_phase(phase);
    31              1                          1             sb_export.connect(sb_fifo.analysis_export);
    32                                                   endfunction 
    33                                                    task  run_phase(uvm_phase phase);
    34              1                          1             super.run_phase(phase);
    35              1                          1             forever begin
    36              1                     140006             sb_fifo.get(item);
    37                                                       if(item.rst) begin
    38              1                       5958             check_rst();
    39              1                       5958             reset_internals();    
    40                                                       end
    41                                                       else begin
    42              1                     134047             golden_model();
    43              1                     134047             check_results();    
    44                                                       end
    45                                                       end
    46                                                   endtask //
    47                                               
    48                                                   task  check_rst();
    49                                                       if(item.out!=0 && item.leds!=0)begin
    50              1                    ***0***                 wrong_count=wrong_count+1;
    51              1                    ***0***                 `uvm_info("score_board", "error in reset",UVM_MEDIUM)
    52                                                       end
    53                                                       else 
    54              1                       5958                 correct_count++;
    55              1                       5958                 reset_internals();
    56                                                   endtask //
    57                                               
    58                                                   task  reset_internals();
    59              1                      11916             {red_op_A_reg,red_op_B_reg,bypass_A_reg,bypass_B_reg,direction_reg,serial_in_reg}=6'b000000;
    60              1                      11916             opcode_reg=3'b000;
    61              1                      11916             cin_reg=2'b00;
    62              1                      11916             {A_reg,B_reg}=6'b000000;
    63                                                   endtask //
    64                                               
    65                                                   task  check_results();
    66                                                       if (item.out==out_exp && item.leds==leds_exp) 
    67              1                     134047                 correct_count++;
    68                                                       else begin
    69              1                    ***0***                 wrong_count++;
    70              1                    ***0***                 `uvm_info("score_board", "error",UVM_MEDIUM)
    71                                                       end
    72                                                   endtask //
    73                                               
    74                                                   function bit invalid();
    75                                                       if(opcode_reg==item.INVALID6 || opcode_reg==item.INVALID7)
    76              1                       1862             return 1;
    77                                                       else if (opcode_reg>3'b001 && (red_op_A_reg||red_op_B_reg))
    78              1                       2863             return 1;
    79                                                       else 
    80              1                     255972             return 0;
    81                                                   endfunction
    82                                               
    83                                                   task  golden_model();
    84                                                       if(invalid())
    85              1                       3770             leds_exp=~leds_exp;
    86                                                       else
    87              1                     130277             leds_exp=0;
    88                                               
    89                                                       
    90                                                       if (bypass_A_reg)
    91              1                       5004             out_exp=A_reg;
    92                                                       else if(bypass_B_reg)
    93              1                       2393             out_exp=B_reg;
    94                                                       else if(invalid())
    95              1                        955             out_exp=0;
    96                                                       else begin
    97                                                           if(opcode_reg==item.OR)
    98                                                           begin
    99                                                               if (red_op_A_reg) 
    100             1                          2                         out_exp=|A_reg;
    101                                                              else if(red_op_B_reg)
    102             1                          1                         out_exp=|B_reg;
    103                                                              else
    104             1                      24161                         out_exp=A_reg|B_reg; 
    105                                                          end
    106                                                          else if(opcode_reg==item.XOR)
    107                                                          begin
    108                                                              if (red_op_A_reg) 
    109             1                        498                         out_exp=^A_reg;
    110                                                              else if(red_op_B_reg)
    111             1                         19                         out_exp=^B_reg;
    112                                                              else
    113             1                      20000                         out_exp=A_reg^B_reg; 
    114                                                          end
    115                                                          else if(opcode_reg==item.ADD)
    116             1                      20163                     out_exp=A_reg+B_reg+cin_reg;
    117                                                          else if(opcode_reg==item.MULT)
    118             1                      20446                     out_exp=A_reg*B_reg;
    119                                                          else if(opcode_reg==item.SHIFT)
    120                                                              begin
    121                                                                  if(direction_reg)
    122             1                        104                             out_exp = {out_exp[4:0],serial_in_reg};
    123                                                                  else
    124             1                      20090                             out_exp = {serial_in_reg,out_exp[5:1]};
    125                                                              end
    126                                                          else if(opcode_reg==item.ROTATE)
    127                                                              begin
    128                                                                  if(direction_reg)
    129             1                        111                             out_exp = {out_exp[4:0],out_exp[5]};
    130                                                                  else
    131             1                      20100                             out_exp = {out_exp[0],out_exp[5:1]};
    132                                                              end
    133                                                      end
    134             1                     134047             update_internals();
    135                                                  endtask //
    136                                              
    137                                                  task  update_internals();
    138             1                     134047             cin_reg=item.cin;
    139             1                     134047             red_op_A_reg=item.red_op_A;
    140             1                     134047             red_op_B_reg=item.red_op_B;
    141             1                     134047             bypass_A_reg=item.bypass_A;
    142             1                     134047             bypass_B_reg=item.bypass_B;
    143             1                     134047             direction_reg=item.direction;
    144             1                     134047             serial_in_reg=item.serial_in;
    145             1                     134047             opcode_reg=item.opcode|item.op2;
    146             1                     134047             A_reg=item.A;
    147             1                     134047             B_reg=item.B;
    148                                                  endtask 
    149                                              endclass 
    150                                              
    151                                                  
    152                                              endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        36        29         7      80.5

================================Branch Details================================

Branch Coverage for file alsu_scoreboard.sv --

------------------------------------IF Branch------------------------------------
    37                                    140005     Count coming in to IF
    37              1                       5958             if(item.rst) begin
    41              1                     134047             else begin
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    49                                      5958     Count coming in to IF
    49              1                    ***0***             if(item.out!=0 && item.leds!=0)begin
    53              1                       5958             else 
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    51                                   ***0***     Count coming in to IF
    51              1                    ***0***                 `uvm_info("score_board", "error in reset",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    66                                    134047     Count coming in to IF
    66              1                     134047             if (item.out==out_exp && item.leds==leds_exp) 
    68              1                    ***0***             else begin
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    70                                   ***0***     Count coming in to IF
    70              1                    ***0***                 `uvm_info("score_board", "error",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    75                                    260697     Count coming in to IF
    75              1                       1862             if(opcode_reg==item.INVALID6 || opcode_reg==item.INVALID7)
    77              1                       2863             else if (opcode_reg>3'b001 && (red_op_A_reg||red_op_B_reg))
    79              1                     255972             else 
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    84                                    134047     Count coming in to IF
    84              1                       3770             if(invalid())
    86              1                     130277             else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    90                                    134047     Count coming in to IF
    90              1                       5004             if (bypass_A_reg)
    92              1                       2393             else if(bypass_B_reg)
    94              1                        955             else if(invalid())
    96              1                     125695             else begin
Branch totals: 4 hits of 4 branches = 100.0%

------------------------------------IF Branch------------------------------------
    97                                    125695     Count coming in to IF
    97              1                      24164                 if(opcode_reg==item.OR)
    106             1                      20517                 else if(opcode_reg==item.XOR)
    115             1                      20163                 else if(opcode_reg==item.ADD)
    117             1                      20446                 else if(opcode_reg==item.MULT)
    119             1                      20194                 else if(opcode_reg==item.SHIFT)
    126             1                      20211                 else if(opcode_reg==item.ROTATE)
                                         ***0***     All False Count
Branch totals: 6 hits of 7 branches = 85.7%

------------------------------------IF Branch------------------------------------
    99                                     24164     Count coming in to IF
    99              1                          2                     if (red_op_A_reg) 
    101             1                          1                     else if(red_op_B_reg)
    103             1                      24161                     else
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    108                                    20517     Count coming in to IF
    108             1                        498                     if (red_op_A_reg) 
    110             1                         19                     else if(red_op_B_reg)
    112             1                      20000                     else
Branch totals: 3 hits of 3 branches = 100.0%

------------------------------------IF Branch------------------------------------
    121                                    20194     Count coming in to IF
    121             1                        104                         if(direction_reg)
    123             1                      20090                         else
Branch totals: 2 hits of 2 branches = 100.0%

------------------------------------IF Branch------------------------------------
    128                                    20211     Count coming in to IF
    128             1                        111                         if(direction_reg)
    130             1                      20100                         else
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              9         5         4      55.5

================================Condition Details================================

Condition Coverage for file alsu_scoreboard.sv --

----------------Focused Condition View-------------------
Line       49 Item    1  ((this.item.out != 0) && (this.item.leds != 0))
Condition totals: 0 of 2 input terms covered = 0.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
   (this.item.out != 0)         N  '_1' not hit             Hit '_1'
  (this.item.leds != 0)         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (this.item.out != 0)_0   -                             
  Row   2:    ***0***  (this.item.out != 0)_1   (this.item.leds != 0)         
  Row   3:    ***0***  (this.item.leds != 0)_0  (this.item.out != 0)          
  Row   4:    ***0***  (this.item.leds != 0)_1  (this.item.out != 0)          

----------------Focused Condition View-------------------
Line       66 Item    1  ((this.item.out == this.out_exp) && (this.item.leds == this.leds_exp))
Condition totals: 0 of 2 input terms covered = 0.0%

                         Input Term   Covered  Reason for no coverage   Hint
                        -----------  --------  -----------------------  --------------
    (this.item.out == this.out_exp)         N  '_0' not hit             Hit '_0'
  (this.item.leds == this.leds_exp)         N  '_0' not hit             Hit '_0'

     Rows:       Hits  FEC Target                           Non-masking condition(s)      
 ---------  ---------  --------------------                 -------------------------     
  Row   1:    ***0***  (this.item.out == this.out_exp)_0    -                             
  Row   2:          1  (this.item.out == this.out_exp)_1    (this.item.leds == this.leds_exp)
  Row   3:    ***0***  (this.item.leds == this.leds_exp)_0  (this.item.out == this.out_exp)
  Row   4:          1  (this.item.leds == this.leds_exp)_1  (this.item.out == this.out_exp)

----------------Focused Condition View-------------------
Line       75 Item    1  ((this.opcode_reg == INVALID6) || (this.opcode_reg == INVALID7))
Condition totals: 2 of 2 input terms covered = 100.0%

                     Input Term   Covered  Reason for no coverage   Hint
                    -----------  --------  -----------------------  --------------
  (this.opcode_reg == INVALID6)         Y
  (this.opcode_reg == INVALID7)         Y

     Rows:       Hits  FEC Target                       Non-masking condition(s)      
 ---------  ---------  --------------------             -------------------------     
  Row   1:          1  (this.opcode_reg == INVALID6)_0  ~(this.opcode_reg == INVALID7)
  Row   2:          1  (this.opcode_reg == INVALID6)_1  -                             
  Row   3:          1  (this.opcode_reg == INVALID7)_0  ~(this.opcode_reg == INVALID6)
  Row   4:          1  (this.opcode_reg == INVALID7)_1  ~(this.opcode_reg == INVALID6)

----------------Focused Condition View-------------------
Line       77 Item    1  ((this.opcode_reg > 1) && (this.red_op_A_reg || this.red_op_B_reg))
Condition totals: 3 of 3 input terms covered = 100.0%

             Input Term   Covered  Reason for no coverage   Hint
            -----------  --------  -----------------------  --------------
  (this.opcode_reg > 1)         Y
      this.red_op_A_reg         Y
      this.red_op_B_reg         Y

     Rows:       Hits  FEC Target               Non-masking condition(s)      
 ---------  ---------  --------------------     -------------------------     
  Row   1:          1  (this.opcode_reg > 1)_0  -                             
  Row   2:          1  (this.opcode_reg > 1)_1  (this.red_op_A_reg || this.red_op_B_reg)
  Row   3:          1  this.red_op_A_reg_0      ((this.opcode_reg > 1) && ~this.red_op_B_reg)
  Row   4:          1  this.red_op_A_reg_1      (this.opcode_reg > 1)         
  Row   5:          1  this.red_op_B_reg_0      ((this.opcode_reg > 1) && ~this.red_op_A_reg)
  Row   6:          1  this.red_op_B_reg_1      ((this.opcode_reg > 1) && ~this.red_op_A_reg)


Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_scoreboard.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_test.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           29        26         3      89.6

================================Statement Details================================

Statement Coverage for file alsu_test.sv --

    1                                                package alsu_test_pkg;
    2                                                import env_pac::*;
    3                                                import uvm_pkg::*;
    4                                                import reset_sequence ::*;
    5                                                import main_sequence_con1::*;
    6                                                import main_sequence_con2::*;
    7                                                import cfg::*;
    8                                                `include "uvm_macros.svh"
    9                                                class alsu_test extends uvm_test;
    10              1                    ***0***         `uvm_component_utils(alsu_test)
    10              2                    ***0***     
    10              3                          4     
    11                                                   alsu_confg cfgg;
    12                                                   alsu_env env;
    13                                                   reset_seq reset_seqq;
    14                                                   main_seq_con1 main_seq1;
    15                                                   main_seq_con2 main_seq2;
    16                                                   function new(string name = "alsu_test",uvm_component parent = null);
    17              1                          1             super.new(name,parent);
    18                                                   endfunction 
    19                                               
    20                                                   function void build_phase (uvm_phase phase);
    21              1                          1             super.build_phase(phase);
    22              1                          1             env = alsu_env::type_id::create("env",this);
    23              1                          1             cfgg = alsu_confg::type_id::create("cfgg",this);
    24              1                          1             reset_seqq = reset_seq::type_id::create("reset_seq",this);
    25              1                          1             main_seq1 = main_seq_con1::type_id::create("main_seq1",this);
    26              1                          1             main_seq2 = main_seq_con2::type_id::create("main_seq2",this);
    27                                                       if(!uvm_config_db#(virtual alsu_inter)::get(this,"","alsu_test_vif",cfgg.alsu_test_vif))
    28              1                    ***0***             `uvm_fatal("build_phase","a333333333");
    29              1                          1             uvm_config_db#(alsu_confg)::set(null,"*","CFG",cfgg);
    30                                                   endfunction 
    31                                               
    32                                                   task run_phase (uvm_phase phase);
    33              1                          1             super.run_phase(phase);
    34              1                          1             phase.raise_objection(this);
    35              1                          1             `uvm_info("run_phase", "reset asserted",UVM_MEDIUM)
    36              1                          1             reset_seqq.start(env.agt.sqr);
    37              1                          1             `uvm_info("run_phase", "reset desserted",UVM_MEDIUM)
    38                                               
    39              1                          1             `uvm_info("run_phase", "main started with con1",UVM_MEDIUM)
    40              1                          1             main_seq1.start(env.agt.sqr);
    41              1                          1             `uvm_info("run_phase", "main with con1 finished",UVM_MEDIUM)
    42                                               
    43              1                          1             `uvm_info("run_phase", "main started with con2",UVM_MEDIUM)
    44              1                          1             main_seq2.start(env.agt.sqr);
    45              1                          1             `uvm_info("run_phase", "main with con2 finished",UVM_MEDIUM)
    46                                               
    47              1                          1             `uvm_info("run_phase", "reset asserted",UVM_MEDIUM)
    48              1                          1             reset_seqq.start(env.agt.sqr);
    49              1                          1             `uvm_info("run_phase", "reset desserted",UVM_MEDIUM)
    50                                               
    51              1                          1             `uvm_info("run_phase", "finished",UVM_MEDIUM)
    52                                                       
    53                                                       
    54              1                          1             `uvm_info("run_phase", $sformatf("correct_count=%0d , wrong_count = %0d",env.sb.correct_count,env.sb.wrong_count),UVM_MEDIUM)
    55                                               
    56              1                          1             phase.drop_objection(this);
    57                                                   endtask
    58                                                   
    59                                               
    60                                               endclass 
    61                                               
    62                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        24        11        13      45.8

================================Branch Details================================

Branch Coverage for file alsu_test.sv --

------------------------------------IF Branch------------------------------------
    27                                         1     Count coming in to IF
    27              1                    ***0***             if(!uvm_config_db#(virtual alsu_inter)::get(this,"","alsu_test_vif",cfgg.alsu_test_vif))
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    28                                   ***0***     Count coming in to IF
    28              1                    ***0***             `uvm_fatal("build_phase","a333333333");
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    35                                         1     Count coming in to IF
    35              1                          1             `uvm_info("run_phase", "reset asserted",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    37                                         1     Count coming in to IF
    37              1                          1             `uvm_info("run_phase", "reset desserted",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    39                                         1     Count coming in to IF
    39              1                          1             `uvm_info("run_phase", "main started with con1",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    41                                         1     Count coming in to IF
    41              1                          1             `uvm_info("run_phase", "main with con1 finished",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    43                                         1     Count coming in to IF
    43              1                          1             `uvm_info("run_phase", "main started with con2",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    45                                         1     Count coming in to IF
    45              1                          1             `uvm_info("run_phase", "main with con2 finished",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    47                                         1     Count coming in to IF
    47              1                          1             `uvm_info("run_phase", "reset asserted",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    49                                         1     Count coming in to IF
    49              1                          1             `uvm_info("run_phase", "reset desserted",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    51                                         1     Count coming in to IF
    51              1                          1             `uvm_info("run_phase", "finished",UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    54                                         1     Count coming in to IF
    54              1                          1             `uvm_info("run_phase", $sformatf("correct_count=%0d , wrong_count = %0d",env.sb.correct_count,env.sb.wrong_count),UVM_MEDIUM)
                                         ***0***     All False Count
Branch totals: 1 hit of 2 branches = 50.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_test.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: alsu_top.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            5         5         0     100.0

================================Statement Details================================

Statement Coverage for file alsu_top.sv --

    1                                                import alsu_test_pkg::*;
    2                                                import uvm_pkg::*;
    3                                                `include "uvm_macros.svh"
    4                                                module top ();
    5                                                    bit clk ;
    6                                                    initial begin
    7               1                          1             forever begin
    8               1                     280011                 #10;
    9               1                     280010                 clk=!clk;
    10                                                       end
    11                                                   end
    12                                                   alsu_inter alsu_test_vif(clk);
    13                                                   ALSU dut (alsu_test_vif.A, alsu_test_vif.B, alsu_test_vif.cin, alsu_test_vif.serial_in, alsu_test_vif.red_op_A, alsu_test_vif.red_op_B, alsu_test_vif.opcode, alsu_test_vif.bypass_A, alsu_test_vif.bypass_B, alsu_test_vif.clk, alsu_test_vif.rst, alsu_test_vif.direction, alsu_test_vif.leds, alsu_test_vif.out);
    14                                                   bind ALSU sva sva_inst(alsu_test_vif.A, alsu_test_vif.B, alsu_test_vif.cin, alsu_test_vif.serial_in, alsu_test_vif.red_op_A, alsu_test_vif.red_op_B, alsu_test_vif.opcode, alsu_test_vif.bypass_A, alsu_test_vif.bypass_B, alsu_test_vif.clk, alsu_test_vif.rst, alsu_test_vif.direction, alsu_test_vif.leds, alsu_test_vif.out);
    15                                                   initial begin
    16              1                          1         uvm_config_db#(virtual alsu_inter)::set(null,"*","alsu_test_vif",alsu_test_vif);
    17              1                          1         run_test("alsu_test");
    18                                                   end
    19                                               
    20                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         0         0         0     100.0
Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      2         2         0     100.0

================================Toggle Details================================

Toggle Coverage for File alsu_top.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          5                                    clk           1           1      100.00 

Total Node Count     =          1 
Toggled Node Count   =          1 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (2 of 2 bins)

=================================================================================
=== File: main_seq_con1.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           65        57         8      87.6

================================Statement Details================================

Statement Coverage for file main_seq_con1.sv --

    1                                                package main_sequence_con1;
    2                                                import sequence_item::*;
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class main_seq_con1 extends uvm_sequence#(seq_item);
    6               1                    ***0***         `uvm_object_utils(main_seq_con1)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          1     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          1     
    6              10                    ***0***     
    7                                                    seq_item item;
    8                                                    parameter testcases = 20000;
    9                                                    function new(string name = "main_seq_con1");
    10              1                          1             super.new(name);
    11                                                   endfunction //new()
    12                                                   task body();
    13              1                      20000             repeat(testcases)
    14                                                       begin
    15              1                      20000             item = seq_item::type_id::create("item");
    16              1                      20000             item.con1.constraint_mode(1);
    17              1                      20000             item.con2.constraint_mode(0);
    18              1                      20000             start_item(item);
    19                                                       assert(item.randomize());
    20              1                      20000             finish_item(item);
    21                                                       end
    22                                                       //
    23              1                          1             item = seq_item::type_id::create("item");
    24              1                          1             item.con1.constraint_mode(1);
    25              1                          1             item.con2.constraint_mode(0);
    26              1                          1             start_item(item);
    27              1                          1             item.opcode=item.OR;
    28              1                          1             item.rst=0; 
    29              1                          1             item.cin=0;
    30              1                          1             item.red_op_A=1;
    31              1                          1             item.red_op_B=1;
    32              1                          1             item.bypass_A=0;
    33              1                          1             item.bypass_B=0;
    34              1                          1             item.direction=0;
    35              1                          1             item.serial_in=0;
    36              1                          1             item.A=5;
    37              1                          1             item.B=7;
    38              1                          1             finish_item(item);
    39                                                       //
    40              1                          1             item = seq_item::type_id::create("item");
    41              1                          1             item.con1.constraint_mode(1);
    42              1                          1             item.con2.constraint_mode(0);
    43              1                          1             start_item(item);
    44              1                          1             item.opcode=item.OR;
    45              1                          1             item.rst=0; 
    46              1                          1             item.cin=0;
    47              1                          1             item.red_op_A=1;
    48              1                          1             item.red_op_B=0;
    49              1                          1             item.bypass_A=0;
    50              1                          1             item.bypass_B=0;
    51              1                          1             item.direction=0;
    52              1                          1             item.serial_in=0;
    53              1                          1             item.A=5;
    54              1                          1             item.B=7;
    55              1                          1             finish_item(item);
    56                                                       //
    57              1                          1             item = seq_item::type_id::create("item");
    58              1                          1             item.con1.constraint_mode(1);
    59              1                          1             item.con2.constraint_mode(0);
    60              1                          1             start_item(item);
    61              1                          1             item.opcode=item.OR;
    62              1                          1             item.rst=0; 
    63              1                          1             item.cin=0;
    64              1                          1             item.red_op_A=0;
    65              1                          1             item.red_op_B=1;
    66              1                          1             item.bypass_A=0;
    67              1                          1             item.bypass_B=0;
    68              1                          1             item.direction=0;
    69              1                          1             item.serial_in=0;
    70              1                          1             item.A=5;
    71              1                          1             item.B=7;
    72              1                          1             finish_item(item);
    73                                                   endtask 
    74                                               endclass //main_seq extends uvm_sequence
    75                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file main_seq_con1.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***         `uvm_object_utils(main_seq_con1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               2                    ***0***         `uvm_object_utils(main_seq_con1)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***         `uvm_object_utils(main_seq_con1)
    6               4                    ***0***         `uvm_object_utils(main_seq_con1)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               5                    ***0***         `uvm_object_utils(main_seq_con1)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***         `uvm_object_utils(main_seq_con1)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File main_seq_con1.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: main_seq_con2.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           17         9         8      52.9

================================Statement Details================================

Statement Coverage for file main_seq_con2.sv --

    1                                                package main_sequence_con2;
    2                                                import sequence_item::*;
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class main_seq_con2 extends uvm_sequence#(seq_item);
    6               1                    ***0***         `uvm_object_utils(main_seq_con2)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          1     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          1     
    6              10                    ***0***     
    7                                                    seq_item item;
    8                                                    parameter testcases = 20000;
    9                                                    function new(string name = "main_seq_con2");
    10              1                          1             super.new(name);
    11                                                   endfunction //new()
    12                                                   task body();
    13              1                     120000             repeat(testcases*6)
    14                                                       begin
    15              1                     120000             item = seq_item::type_id::create("item");
    16              1                     120000             item.con1.constraint_mode(0);
    17              1                     120000             item.con2.constraint_mode(1);
    18              1                     120000             start_item(item);
    19                                                       assert(item.randomize());
    20              1                     120000             finish_item(item);
    21                                                       end
    22                                                   endtask 
    23                                               endclass //main_seq extends uvm_sequence
    24                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file main_seq_con2.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***         `uvm_object_utils(main_seq_con2)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               2                    ***0***         `uvm_object_utils(main_seq_con2)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***         `uvm_object_utils(main_seq_con2)
    6               4                    ***0***         `uvm_object_utils(main_seq_con2)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          1     Count coming in to IF
    6               5                    ***0***         `uvm_object_utils(main_seq_con2)
                                               1     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***         `uvm_object_utils(main_seq_con2)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File main_seq_con2.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: reset_seq.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           26        18         8      69.2

================================Statement Details================================

Statement Coverage for file reset_seq.sv --

    1                                                package reset_sequence;
    2                                                import sequence_item::*;
    3                                                import uvm_pkg::*;
    4                                                `include "uvm_macros.svh"
    5                                                class reset_seq extends uvm_sequence#(seq_item);
    6               1                    ***0***         `uvm_object_utils(reset_seq)
    6               2                    ***0***     
    6               3                    ***0***     
    6               4                    ***0***     
    6               5                    ***0***     
    6               6                          2     
    6               7                    ***0***     
    6               8                    ***0***     
    6               9                          2     
    6              10                    ***0***     
    7                                                    seq_item item;
    8                                                    function new(string name = "reset_seq");
    9               1                          1             super.new(name);
    10                                                   endfunction //new()
    11                                                   task body();
    12              1                          2             item = seq_item::type_id::create("item");
    13              1                          2             start_item(item);
    14              1                          2             item.rst=1;
    15              1                          2             item.cin=0;
    16              1                          2             item.red_op_A=0;
    17              1                          2             item.red_op_B=0;
    18              1                          2             item.bypass_A=0;
    19              1                          2             item.bypass_B=0;
    20              1                          2             item.direction=0;
    21              1                          2             item.serial_in=0;
    22              1                          2             item.opcode=item.OR;
    23              1                          2             item.op2=item.OR;
    24              1                          2             item.A=0;
    25              1                          2             item.B=0;
    26              1                          2             finish_item(item);
    27                                                   endtask 
    28                                               endclass //main_seq extends uvm_sequence
    29                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file reset_seq.sv --

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               1                    ***0***         `uvm_object_utils(reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          2     Count coming in to IF
    6               2                    ***0***         `uvm_object_utils(reset_seq)
                                               2     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               3                    ***0***         `uvm_object_utils(reset_seq)
    6               4                    ***0***         `uvm_object_utils(reset_seq)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    6                                          2     Count coming in to IF
    6               5                    ***0***         `uvm_object_utils(reset_seq)
                                               2     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    6                                    ***0***     Count coming in to IF
    6               6                    ***0***         `uvm_object_utils(reset_seq)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File reset_seq.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: seq_item.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                           12         4         8      33.3

================================Statement Details================================

Statement Coverage for file seq_item.sv --

    1                                                package sequence_item;
    2                                                    import uvm_pkg::*;
    3                                                    `include "uvm_macros.svh"
    4                                                    class seq_item extends uvm_sequence_item;
    5               1                    ***0***             `uvm_object_utils(seq_item)
    5               2                    ***0***     
    5               3                    ***0***     
    5               4                    ***0***     
    5               5                    ***0***     
    5               6                     140005     
    5               7                    ***0***     
    5               8                    ***0***     
    5               9                     140005     
    5              10                    ***0***     
    6                                                        parameter maxpos=3, maxneg=-4, zero=0 ;
    7                                                        typedef enum {OR, XOR, ADD, MULT, SHIFT, ROTATE, INVALID6, INVALID7} opcode_e;
    8                                                        rand logic rst, cin, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    9               1                     420017             rand logic both = red_op_A&red_op_B; 
    10                                                       static rand opcode_e opcode;
    11                                                       static randc opcode_e op2;
    12                                                       rand logic signed [2:0] A, B;
    13                                                       logic [15:0] leds;
    14                                                       logic signed [5:0] out;
    15                                                       function new(string name = "shift_seq_item_class");
    16              1                     420017                 super.new(name);
    17                                                       endfunction //new()
    18                                                       constraint con1 {
    19                                                           op2==0;
    20                                                           rst dist {0:=70,1:=30};
    21                                                       if (opcode==ADD || opcode==MULT) {
    22                                                           A dist {zero:=70,maxpos:=70,maxneg:=70,[-3:2]:=10};
    23                                                           B dist {zero:=70,maxpos:=70,maxneg:=70,[-3:2]:=10};
    24                                                       }
    25                                                       if (opcode==OR || opcode==XOR && red_op_A) {
    26                                                           A inside {1,2,-4};
    27                                                           B inside {0};
    28                                                       }
    29                                                       if (opcode==OR || opcode==XOR && red_op_B && !red_op_A) {
    30                                                           B inside {1,2,-4};
    31                                                           A inside {0};
    32                                                       }
    33                                                       if (red_op_A || red_op_B) {
    34                                                           opcode dist {OR:=500,XOR:=70,ADD:=10,MULT:=10,SHIFT:=10,ROTATE:=10,INVALID6:=10,INVALID7:=10};
    35                                                           
    36                                                           
    37                                                       }
    38                                                       else {
    39                                                           opcode dist {OR:=90,XOR:=70,ADD:=70,MULT:=200,SHIFT:=70,ROTATE:=70,INVALID6:=10,INVALID7:=10};
    40                                                       }
    41                                                       if (opcode==OR || opcode==XOR ) {
    42                                                           red_op_A dist {0:=50,1:=300};
    43                                                           red_op_B dist {0:=50,1:=300};
    44                                                           red_op_A&red_op_B dist {0:=50,1:=300};
    45                                                       }
    46                                                   }
    47                                                   constraint con2{
    48                                                           !(op2 inside {INVALID6,INVALID7});
    49                                                           opcode==0;
    50                                                   }
    51                                                   endclass //seq_item extends superClass
    52                                               endpackage

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                        10         2         8      20.0

================================Branch Details================================

Branch Coverage for file seq_item.sv --

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               1                    ***0***             `uvm_object_utils(seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                     140005     Count coming in to IF
    5               2                    ***0***             `uvm_object_utils(seq_item)
                                          140005     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               3                    ***0***             `uvm_object_utils(seq_item)
    5               4                    ***0***             `uvm_object_utils(seq_item)
Branch totals: 0 hits of 2 branches = 0.0%

------------------------------------IF Branch------------------------------------
    5                                     140005     Count coming in to IF
    5               5                    ***0***             `uvm_object_utils(seq_item)
                                          140005     All False Count
Branch totals: 1 hit of 2 branches = 50.0%

------------------------------------IF Branch------------------------------------
    5                                    ***0***     Count coming in to IF
    5               6                    ***0***             `uvm_object_utils(seq_item)
                                         ***0***     All False Count
Branch totals: 0 hits of 2 branches = 0.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             2         0         2       0.0

================================Expression Details================================

Expression Coverage for file seq_item.sv --

----------------Focused Expression View-----------------
Line       9 Item    1  (this.red_op_A & this.red_op_B)
Expression totals: 0 of 2 input terms covered = 0.0%

     Input Term   Covered  Reason for no coverage   Hint
    -----------  --------  -----------------------  --------------
  this.red_op_A         N  No hits                  Hit '_0' and '_1'
  this.red_op_B         N  No hits                  Hit '_0' and '_1'

     Rows:       Hits  FEC Target            Non-masking condition(s)      
 ---------  ---------  --------------------  -------------------------     
  Row   1:    ***0***  this.red_op_A_0       this.red_op_B                 
  Row   2:    ***0***  this.red_op_A_1       this.red_op_B                 
  Row   3:    ***0***  this.red_op_B_0       this.red_op_A                 
  Row   4:    ***0***  this.red_op_B_1       this.red_op_A                 


FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                      0         0         0     100.0

================================Toggle Details================================

Toggle Coverage for File seq_item.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------

Total Node Count     =          0 
Toggled Node Count   =          0 
Untoggled Node Count =          0 

Toggle Coverage      =      100.0% (0 of 0 bins)

=================================================================================
=== File: sva.sv
=================================================================================
Statement Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Stmts                            1         1         0     100.0

================================Statement Details================================

Statement Coverage for file sva.sv --

    1                                                module sva (
    2                                                    A, B, cin, serial_in, red_op_A, red_op_B, opcode, bypass_A, bypass_B, clk, rst, direction, leds, out
    3                                                );
    4                                                    input clk;
    5                                                    input logic rst, cin, red_op_A, red_op_B, bypass_A, bypass_B, direction, serial_in;
    6                                                    logic signed [1:0] cin_reg ;
    7                                                    assign cin_reg=cin;
    8                                                    input logic [2:0] opcode;
    9                                                    input logic signed [2:0] A, B;
    10                                                   input logic [15:0] leds;
    11                                                   input logic signed [5:0] out;
    12              1                     111834         always_comb begin 
    13                                                       if ( rst)
    14                                                       RESET : assert final( out==6'd0  );
    15                                                   end
    16                                                   //valid
    17                                                   BY_B:assert property(@(posedge  clk) disable iff( rst) $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b1  && $past(rst,2)==1'd0 && $past(rst)==1'd0   |->  out==$past(B,2)  );
    18                                                   BY_A:assert property(@(posedge  clk) disable iff( rst) $past( bypass_A,2)==1'b1   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==$past(A,2)  );
    19                                                   OR_A:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd0 && $past( red_op_A,2)==1'b1 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==|$past( A,2)     );
    20                                                   OR_B:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd0 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b1 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==|$past( B,2)   );
    21                                                   OR:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd0 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==$past( B,2)|$past( A,2)   );
    22                                                   XOR_A:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd1 && $past( red_op_A,2)==1'b1 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==^$past( A,2)   );
    23                                                   XOR_B:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd1 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b1 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==^$past( B,2)   );
    24                                                   XOR:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd1 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==$past( B,2)^$past( A,2)   );
    25                                                   ADD:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd2 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==$past( B,2)+$past( A,2)+$past( cin_reg,2)  );
    26                                                   MULT:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd3 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out==$past( B,2)*$past( A,2)  );
    27                                                   SHIFT_R:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd4 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0 && $past( direction,2)==1'b1   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out=={$past(out[4:0]), $past( serial_in,2)}   );
    28                                                   SHIFT_L:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd4 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0 && $past( direction,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out=={$past( serial_in,2), $past(out[5:1])}   );
    29                                                   ROTATE_R:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd5 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0 && $past( direction,2)==1'b1   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out=={$past(out[4:0]),$past(out[5])}   );
    30                                                   ROTATE_L:assert property(@(posedge  clk) disable iff( rst) $past( opcode,2)==3'd5 && $past( red_op_A,2)==1'b0 && $past( red_op_B,2)==1'b0 && $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0 && $past( direction,2)==1'b0   && $past(rst,2)==1'd0 && $past(rst)==1'd0  |-> out=={$past(out[0]),$past(out[5:1])}   );
    31                                                   //invalid
    32                                                   invalid_out :assert property(@(posedge  clk) disable iff( rst) ($past( opcode,2)==3'd6 || $past( opcode,2)==3'd7 || ($past( opcode,2)>3'd1 && ($past( red_op_A,2)==1||$past( red_op_B,2)==1)))&& $past( bypass_A,2)==1'b0 && $past( bypass_B,2)==1'b0  && $past(rst,2)==1'd0 && $past(rst)==1'd0  |->  out==0  ); 
    33                                                   //leds 
    34                                                   invalid_leds :assert property(@(posedge  clk) disable iff( rst) ($past( opcode,1)==3'd6 || $past( opcode,1)==3'd7 || ($past( opcode,1)>3'd1 && ($past( red_op_A,1)==1||$past( red_op_B,1)==1)))  && $past(rst)==1'd0  |-> ##1 leds==~$past(leds)  ); 
    35                                               endmodule

Branch Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Branches                         2         2         0     100.0

================================Branch Details================================

Branch Coverage for file sva.sv --

------------------------------------IF Branch------------------------------------
    13                                    111834     Count coming in to IF
    13              1                       6166             if ( rst)
                                          105668     All False Count
Branch totals: 2 hits of 2 branches = 100.0%


Condition Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Condition Terms              0         0         0     100.0
Expression Coverage:
    Enabled Coverage            Active   Covered    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FEC Expression Terms             0         0         0     100.0
FSM Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    FSMs                                                       100.0
        States                       0         0         0     100.0
        Transitions                  0         0         0     100.0
Toggle Coverage:
    Enabled Coverage            Active      Hits    Misses % Covered
    ----------------            ------      ----    ------ ---------
    Toggle Bins                     84        82         2      97.6

================================Toggle Details================================

Toggle Coverage for File sva.sv --

       Line                                   Node      1H->0L      0L->1H  "Coverage"
--------------------------------------------------------------------------------------
          4                                    clk           1           1      100.00 
          5                              serial_in           1           1      100.00 
          5                                    rst           1           1      100.00 
          5                               red_op_B           1           1      100.00 
          5                               red_op_A           1           1      100.00 
          5                              direction           1           1      100.00 
          5                                    cin           1           1      100.00 
          5                               bypass_B           1           1      100.00 
          5                               bypass_A           1           1      100.00 
          6                             cin_reg[1]           0           0        0.00 
          6                             cin_reg[0]           1           1      100.00 
          8                              opcode[2]           1           1      100.00 
          8                              opcode[1]           1           1      100.00 
          8                              opcode[0]           1           1      100.00 
          9                                   B[2]           1           1      100.00 
          9                                   B[1]           1           1      100.00 
          9                                   B[0]           1           1      100.00 
          9                                   A[2]           1           1      100.00 
          9                                   A[1]           1           1      100.00 
          9                                   A[0]           1           1      100.00 
         10                                leds[9]           1           1      100.00 
         10                                leds[8]           1           1      100.00 
         10                                leds[7]           1           1      100.00 
         10                                leds[6]           1           1      100.00 
         10                                leds[5]           1           1      100.00 
         10                                leds[4]           1           1      100.00 
         10                                leds[3]           1           1      100.00 
         10                                leds[2]           1           1      100.00 
         10                                leds[1]           1           1      100.00 
         10                               leds[15]           1           1      100.00 
         10                               leds[14]           1           1      100.00 
         10                               leds[13]           1           1      100.00 
         10                               leds[12]           1           1      100.00 
         10                               leds[11]           1           1      100.00 
         10                               leds[10]           1           1      100.00 
         10                                leds[0]           1           1      100.00 
         11                                 out[5]           1           1      100.00 
         11                                 out[4]           1           1      100.00 
         11                                 out[3]           1           1      100.00 
         11                                 out[2]           1           1      100.00 
         11                                 out[1]           1           1      100.00 
         11                                 out[0]           1           1      100.00 

Total Node Count     =         42 
Toggled Node Count   =         41 
Untoggled Node Count =          1 

Toggle Coverage      =       97.6% (82 of 84 bins)

COVERGROUP COVERAGE:
-----------------------------------------------------------------------------------------------
Covergroup                                             Metric       Goal    Status               
                                                                                              
-----------------------------------------------------------------------------------------------
 TYPE /coverage_pkg/alsu_cover/g1                      100.0%        100    Covered              
    covered/total bins:                                    56         56                      
    missing/total bins:                                     0         56                      
    % Hit:                                             100.0%        100                      
    Coverpoint g1::direction_cp                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::serial_in_cp                        100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::CIN_cp                              100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::A_cp                                100.0%        100    Covered              
        covered/total bins:                                 6          6                      
        missing/total bins:                                 0          6                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::B_cp                                100.0%        100    Covered              
        covered/total bins:                                 6          6                      
        missing/total bins:                                 0          6                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::ALU_cpp                             100.0%        100    Covered              
        covered/total bins:                                 8          8                      
        missing/total bins:                                 0          8                      
        % Hit:                                         100.0%        100                      
    Coverpoint g1::ALU_cp                              100.0%        100    Covered              
        covered/total bins:                                11         11                      
        missing/total bins:                                 0         11                      
        % Hit:                                         100.0%        100                      
    Cross g1::#cross__0#                               100.0%        100    Covered              
        covered/total bins:                                19         19                      
        missing/total bins:                                 0         19                      
        % Hit:                                         100.0%        100                      
 CLASS alsu_cover
 Covergroup instance \/coverage_pkg::alsu_cover::g1  
                                                       100.0%        100    Covered              
    covered/total bins:                                    56         56                      
    missing/total bins:                                     0         56                      
    % Hit:                                             100.0%        100                      
    Coverpoint direction_cp                            100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin dir1                                         9947          1    Covered              
        bin dir0                                       130058          1    Covered              
    Coverpoint serial_in_cp                            100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin in1                                         10126          1    Covered              
        bin in0                                        129879          1    Covered              
    Coverpoint CIN_cp                                  100.0%        100    Covered              
        covered/total bins:                                 2          2                      
        missing/total bins:                                 0          2                      
        % Hit:                                         100.0%        100                      
        bin cin1                                         9943          1    Covered              
        bin cin0                                       130062          1    Covered              
    Coverpoint A_cp                                    100.0%        100    Covered              
        covered/total bins:                                 6          6                      
        missing/total bins:                                 0          6                      
        % Hit:                                         100.0%        100                      
        bin A_data_0                                    17441          1    Covered              
        bin A_data_max                                  17889          1    Covered              
        bin A_data_neg                                  19079          1    Covered              
        bin A_data_walkingones[-4]                       2088          1    Covered              
        bin A_data_walkingones[1]                        1847          1    Covered              
        bin A_data_walkingones[2]                        1805          1    Covered              
        default bin A_data_default                      49816               Occurred             
    Coverpoint B_cp                                    100.0%        100    Covered              
        covered/total bins:                                 6          6                      
        missing/total bins:                                 0          6                      
        % Hit:                                         100.0%        100                      
        bin B_data_0                                    21279          1    Covered              
        bin B_data_max                                  18569          1    Covered              
        bin B_data_neg                                  17950          1    Covered              
        bin B_data_walkingones[-4]                        424          1    Covered              
        bin B_data_walkingones[1]                         337          1    Covered              
        bin B_data_walkingones[2]                         331          1    Covered              
        default bin B_data_default                      48727               Occurred             
    Coverpoint ALU_cpp                                 100.0%        100    Covered              
        covered/total bins:                                 8          8                      
        missing/total bins:                                 0          8                      
        % Hit:                                         100.0%        100                      
        bin binsinvalid[INVALID6]                        1515          1    Covered              
        bin binsinvalid[INVALID7]                        1523          1    Covered              
        bin bins_shift[SHIFT]                            2981          1    Covered              
        bin bins_shift[ROTATE]                           2888          1    Covered              
        bin bins_arith[ADD]                              2187          1    Covered              
        bin bins_arith[MULT]                             4605          1    Covered              
        bin bins_bitwise[OR]                           120005          1    Covered              
        bin bins_bitwise[XOR]                            4301          1    Covered              
    Coverpoint ALU_cp                                  100.0%        100    Covered              
        covered/total bins:                                11         11                      
        missing/total bins:                                 0         11                      
        % Hit:                                         100.0%        100                      
        bin bins_shift[SHIFT]                           20000          1    Covered              
        bin bins_shift[ROTATE]                          20000          1    Covered              
        bin bins_arith[ADD]                             20000          1    Covered              
        bin bins_arith[MULT]                            20000          1    Covered              
        bin bins_bitwise[OR]                            40005          1    Covered              
        bin bins_bitwise[XOR]                           20000          1    Covered              
        bin bins_trans[OR=>ROTATE]                       3332          1    Covered              
        bin bins_trans[OR=>SHIFT]                        4466          1    Covered              
        bin bins_trans[OR=>MULT]                         5051          1    Covered              
        bin bins_trans[OR=>ADD]                          3778          1    Covered              
        bin bins_trans[OR=>XOR]                          2788          1    Covered              
    Cross #cross__0#                                   100.0%        100    Covered              
        covered/total bins:                                19         19                      
        missing/total bins:                                 0         19                      
        % Hit:                                         100.0%        100                      
        bin add_mult_max_a                               1819          1    Covered              
        bin add_mult_max_b                               1959          1    Covered              
        bin add_mult_neg_a                               1912          1    Covered              
        bin add_mult_neg_b                               1794          1    Covered              
        bin add_mult_zero_a                              1697          1    Covered              
        bin add_mult_zero_b                              1675          1    Covered              
        bin add_cin_1                                     774          1    Covered              
        bin add_cin_0                                    2683          1    Covered              
        bin shift_shiftin_0                              2728          1    Covered              
        bin shift_shiftin_1                               275          1    Covered              
        bin shift_rotate_0                               5427          1    Covered              
        bin shift_rotate_1                                499          1    Covered              
        bin red_op_A_OR_XOR_1                            1454          1    Covered              
        bin red_op_A_OR_XOR_2                            1428          1    Covered              
        bin red_op_A_OR_XOR_4                            1524          1    Covered              
        bin red_op_B_OR_XOR_1                              82          1    Covered              
        bin red_op_B_OR_XOR_2                             115          1    Covered              
        bin red_op_B_OR_XOR_4                             126          1    Covered              
        bin invalid                                      2624          1    Covered              

TOTAL COVERGROUP COVERAGE: 100.0%  COVERGROUP TYPES: 1

ASSERTION RESULTS:
-------------------------------------------------------
Name                 File(Line)           Failure Pass 
                                          Count   Count 
-------------------------------------------------------
/top/dut/sva_inst/RESET
                     sva.sv(14)                 0     1
/top/dut/sva_inst/BY_B
                     sva.sv(17)                 0     1
/top/dut/sva_inst/BY_A
                     sva.sv(18)                 0     1
/top/dut/sva_inst/OR_A
                     sva.sv(19)                 0     1
/top/dut/sva_inst/OR_B
                     sva.sv(20)                 0     1
/top/dut/sva_inst/OR sva.sv(21)                 0     1
/top/dut/sva_inst/XOR_A
                     sva.sv(22)                 0     1
/top/dut/sva_inst/XOR_B
                     sva.sv(23)                 0     1
/top/dut/sva_inst/XOR
                     sva.sv(24)                 0     1
/top/dut/sva_inst/ADD
                     sva.sv(25)                 0     1
/top/dut/sva_inst/MULT
                     sva.sv(26)                 0     1
/top/dut/sva_inst/SHIFT_R
                     sva.sv(27)                 0     1
/top/dut/sva_inst/SHIFT_L
                     sva.sv(28)                 0     1
/top/dut/sva_inst/ROTATE_R
                     sva.sv(29)                 0     1
/top/dut/sva_inst/ROTATE_L
                     sva.sv(30)                 0     1
/top/dut/sva_inst/invalid_out
                     sva.sv(32)                 0     1
/top/dut/sva_inst/invalid_leds
                     sva.sv(34)                 0     1
/main_sequence_con2/main_seq_con2/body/#ublk#124085810#14/immed__19
                     main_seq_con2.sv(19)       0     1
/main_sequence_con1/main_seq_con1/body/#ublk#124085809#14/immed__19
                     main_seq_con1.sv(19)       0     1

Total Coverage By File (code coverage only, filtered view): 77.7%

